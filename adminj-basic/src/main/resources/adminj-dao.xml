<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <context:component-scan base-package="com.lhy.adminj.basic"/>

    <!-- 数据源定义 -->
    <!--<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
         &lt;!&ndash;数据库基本信息配置&ndash;&gt;
        <property name="driverClassName" value="${druid.driverClassName}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
         &lt;!&ndash;初始化连接数量&ndash;&gt;
        <property name="initialSize" value="${druid.initialSize}"/>
         &lt;!&ndash;最大并发连接数&ndash;&gt;
        <property name="maxActive" value="${druid.maxActive}"/>
         &lt;!&ndash;最小空闲连接数&ndash;&gt;
        <property name="minIdle" value="${druid.minIdle}"/>
         &lt;!&ndash;配置获取连接等待超时的时间&ndash;&gt;
        <property name="maxWait" value="${druid.maxWait}"/>
         &lt;!&ndash;超过时间限制是否回收&ndash;&gt;
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
         &lt;!&ndash;超过时间限制多长；&ndash;&gt;
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
         &lt;!&ndash;配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒&ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
         &lt;!&ndash;配置一个连接在池中最小生存的时间，单位是毫秒&ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
         &lt;!&ndash;用来检测连接是否有效的sql，要求是一个查询语句&ndash;&gt;
        <property name="validationQuery" value="${druid.validationQuery}"/>
         &lt;!&ndash;申请连接的时候检测&ndash;&gt;
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
         &lt;!&ndash;申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能&ndash;&gt;
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
         &lt;!&ndash;归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能&ndash;&gt;
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
         &lt;!&ndash;打开PSCache，并且指定每个连接上PSCache的大小&ndash;&gt;
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        &lt;!&ndash;属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall&ndash;&gt;
        <property name="filters" value="${druid.filters}"/>
    </bean>
    <bean id="oracleDS" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        &lt;!&ndash;数据库基本信息配置&ndash;&gt;
        <property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@192.168.20.10:1521:ORCL"/>
        <property name="username" value="clspuser"/>
        <property name="password" value="clsp"/>
        &lt;!&ndash;初始化连接数量&ndash;&gt;
        <property name="initialSize" value="${druid.initialSize}"/>
        &lt;!&ndash;最大并发连接数&ndash;&gt;
        <property name="maxActive" value="${druid.maxActive}"/>
        &lt;!&ndash;最小空闲连接数&ndash;&gt;
        <property name="minIdle" value="${druid.minIdle}"/>
        &lt;!&ndash;配置获取连接等待超时的时间&ndash;&gt;
        <property name="maxWait" value="${druid.maxWait}"/>
        &lt;!&ndash;超过时间限制是否回收&ndash;&gt;
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        &lt;!&ndash;超过时间限制多长；&ndash;&gt;
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        &lt;!&ndash;配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒&ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        &lt;!&ndash;配置一个连接在池中最小生存的时间，单位是毫秒&ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        &lt;!&ndash;用来检测连接是否有效的sql，要求是一个查询语句&ndash;&gt;
        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>
        &lt;!&ndash;申请连接的时候检测&ndash;&gt;
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        &lt;!&ndash;申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能&ndash;&gt;
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        &lt;!&ndash;归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能&ndash;&gt;
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        &lt;!&ndash;打开PSCache，并且指定每个连接上PSCache的大小&ndash;&gt;
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        &lt;!&ndash;属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall&ndash;&gt;
        <property name="filters" value="${druid.filters}"/>
    </bean>-->
    <!-- spring atomikos 配置　开始-->
    <!-- mysql数据源 -->
    <bean id="druidDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <description>mysql xa datasource</description>
        <property name="uniqueResourceName">
            <value>mysql_ds</value>
        </property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">root</prop>
                <prop key="URL">jdbc:mysql://192.168.15.202:3306/lhy_test?useUnicode=true&amp;characterEncoding=utf-8</prop>
            </props>
        </property>
        <!-- 连接池里面连接的个数? -->
        <property name="poolSize" value="3"/>
        <property name="maxPoolSize" value="20"/>
    </bean>

    <!-- oracle数据源 -->
    <bean id="oracleDS" class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <description>oracle xa datasource</description>
        <property name="uniqueResourceName">
            <value>oracle_ds</value>
        </property>
        <property name="xaDataSourceClassName">
            <value>oracle.jdbc.xa.client.OracleXADataSource</value>
        </property>
        <property name="xaProperties">
            <props>
                <prop key="user">clspuser</prop>
                <prop key="password">clsp</prop>
                <prop key="URL">jdbc:oracle:thin:@192.168.20.10:1521:ORCL</prop>
            </props>
        </property>
        <!-- 连接池里面连接的个数? -->
        <property name="poolSize" value="3"/>
        <property name="maxPoolSize" value="20"/>
    </bean>

    <!-- atomikos事务管理器 -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <description>UserTransactionManager</description>
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>

    <!-- spring 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager" />
        <property name="userTransaction" ref="atomikosUserTransaction" />
    </bean>

    <!-- spring jdbc -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <bean id="jdbcTemplateClsp" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="oracleDS"/>
    </bean>

    <!-- Transaction manager for a single JDBC DataSource -->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
        <property name="globalRollbackOnParticipationFailure" value="false"/>
    </bean>-->

    <!-- 声明使用注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>